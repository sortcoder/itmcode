"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "db", {
  enumerable: true,
  get: function get() {
    return _mongoose.default;
  }
});

var _mongoose = _interopRequireDefault(require("mongoose"));

var _Logger = _interopRequireDefault(require("./Logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MONGO_USER = process.env.MONGO_USER;
var MONGO_PASSWORD = encodeURIComponent(process.env.MONGO_PASSWORD); // encode password in case of spacial chracter

var MONGO_HOST = process.env.MONGO_HOST;
var MONGO_PORT = process.env.MONGO_PORT;
var MONGO_DATABASE = process.env.MONGO_DATABASE; // create mongo uri

var url = "mongodb://".concat(MONGO_USER, ":").concat(MONGO_PASSWORD, "@").concat(MONGO_HOST, ":").concat(MONGO_PORT, "/").concat(MONGO_DATABASE, "?authMechanism=SCRAM-SHA-1");

_mongoose.default.connect(url, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useCreateIndex: true,
  useFindAndModify: false
});

_mongoose.default.connection.on('connected', () => {
  _Logger.default.info('Mongo has connected successfully');

  console.log('Mongo has connected successfully');
});

_mongoose.default.connection.on('reconnected', () => {
  console.log('Mongo has reconnected');

  _Logger.default.info('Mongo has reconnected');
});

_mongoose.default.connection.on('error', error => {
  console.log('Mongo connection has an error', error);

  _Logger.default.info('Mongo connection has an error', error);

  _mongoose.default.disconnect();
});

_mongoose.default.connection.on('disconnected', () => {
  console.log('Mongo connection is disconnected');

  _Logger.default.info('Mongo connection is disconnected');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXMvRGIuanMiXSwibmFtZXMiOlsiTU9OR09fVVNFUiIsInByb2Nlc3MiLCJlbnYiLCJNT05HT19QQVNTV09SRCIsImVuY29kZVVSSUNvbXBvbmVudCIsIk1PTkdPX0hPU1QiLCJNT05HT19QT1JUIiwiTU9OR09fREFUQUJBU0UiLCJ1cmwiLCJtb25nb29zZSIsImNvbm5lY3QiLCJ1c2VOZXdVcmxQYXJzZXIiLCJ1c2VVbmlmaWVkVG9wb2xvZ3kiLCJ1c2VDcmVhdGVJbmRleCIsInVzZUZpbmRBbmRNb2RpZnkiLCJjb25uZWN0aW9uIiwib24iLCJsb2dnZXIiLCJpbmZvIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwiZGlzY29ubmVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFDQSxJQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZRixVQUEvQjtBQUNBLElBQU1HLGNBQWMsR0FBR0Msa0JBQWtCLENBQUNILE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxjQUFiLENBQXpDLEMsQ0FBdUU7O0FBQ3ZFLElBQU1FLFVBQVUsR0FBR0osT0FBTyxDQUFDQyxHQUFSLENBQVlHLFVBQS9CO0FBQ0EsSUFBTUMsVUFBVSxHQUFHTCxPQUFPLENBQUNDLEdBQVIsQ0FBWUksVUFBL0I7QUFDQSxJQUFNQyxjQUFjLEdBQUdOLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxjQUFuQyxDLENBQ0E7O0FBRUEsSUFBTUMsR0FBRyx1QkFBZ0JSLFVBQWhCLGNBQThCRyxjQUE5QixjQUFnREUsVUFBaEQsY0FBOERDLFVBQTlELGNBQTRFQyxjQUE1RSwrQkFBVDs7QUFFQUUsa0JBQVNDLE9BQVQsQ0FBaUJGLEdBQWpCLEVBQXNCO0FBQ2xCRyxFQUFBQSxlQUFlLEVBQUUsSUFEQztBQUVsQkMsRUFBQUEsa0JBQWtCLEVBQUUsSUFGRjtBQUdsQkMsRUFBQUEsY0FBYyxFQUFFLElBSEU7QUFJbEJDLEVBQUFBLGdCQUFnQixFQUFFO0FBSkEsQ0FBdEI7O0FBT0FMLGtCQUFTTSxVQUFULENBQW9CQyxFQUFwQixDQUF1QixXQUF2QixFQUFvQyxNQUFNO0FBQ3RDQyxrQkFBT0MsSUFBUCxDQUFZLGtDQUFaOztBQUNBQyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxrQ0FBWjtBQUNILENBSEQ7O0FBSUFYLGtCQUFTTSxVQUFULENBQW9CQyxFQUFwQixDQUF1QixhQUF2QixFQUFzQyxNQUFNO0FBQ3hDRyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSx1QkFBWjs7QUFDQUgsa0JBQU9DLElBQVAsQ0FBWSx1QkFBWjtBQUNILENBSEQ7O0FBSUFULGtCQUFTTSxVQUFULENBQW9CQyxFQUFwQixDQUF1QixPQUF2QixFQUFnQ0ssS0FBSyxJQUFJO0FBQ3JDRixFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSwrQkFBWixFQUE2Q0MsS0FBN0M7O0FBQ0FKLGtCQUFPQyxJQUFQLENBQVksK0JBQVosRUFBNkNHLEtBQTdDOztBQUNBWixvQkFBU2EsVUFBVDtBQUNILENBSkQ7O0FBS0FiLGtCQUFTTSxVQUFULENBQW9CQyxFQUFwQixDQUF1QixjQUF2QixFQUF1QyxNQUFNO0FBQ3pDRyxFQUFBQSxPQUFPLENBQUNDLEdBQVIsQ0FBWSxrQ0FBWjs7QUFDQUgsa0JBQU9DLElBQVAsQ0FBWSxrQ0FBWjtBQUNILENBSEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9uZ29vc2UgZnJvbSAnbW9uZ29vc2UnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuL0xvZ2dlcic7XG5jb25zdCBNT05HT19VU0VSID0gcHJvY2Vzcy5lbnYuTU9OR09fVVNFUjtcbmNvbnN0IE1PTkdPX1BBU1NXT1JEID0gZW5jb2RlVVJJQ29tcG9uZW50KHByb2Nlc3MuZW52Lk1PTkdPX1BBU1NXT1JEKTsgLy8gZW5jb2RlIHBhc3N3b3JkIGluIGNhc2Ugb2Ygc3BhY2lhbCBjaHJhY3RlclxuY29uc3QgTU9OR09fSE9TVCA9IHByb2Nlc3MuZW52Lk1PTkdPX0hPU1Q7XG5jb25zdCBNT05HT19QT1JUID0gcHJvY2Vzcy5lbnYuTU9OR09fUE9SVDtcbmNvbnN0IE1PTkdPX0RBVEFCQVNFID0gcHJvY2Vzcy5lbnYuTU9OR09fREFUQUJBU0U7XG4vLyBjcmVhdGUgbW9uZ28gdXJpXG5cbmNvbnN0IHVybCA9IGBtb25nb2RiOi8vJHtNT05HT19VU0VSfToke01PTkdPX1BBU1NXT1JEfUAke01PTkdPX0hPU1R9OiR7TU9OR09fUE9SVH0vJHtNT05HT19EQVRBQkFTRX0/YXV0aE1lY2hhbmlzbT1TQ1JBTS1TSEEtMWA7XG5cbm1vbmdvb3NlLmNvbm5lY3QodXJsLCB7XG4gICAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlLFxuICAgIHVzZVVuaWZpZWRUb3BvbG9neTogdHJ1ZSxcbiAgICB1c2VDcmVhdGVJbmRleDogdHJ1ZSxcbiAgICB1c2VGaW5kQW5kTW9kaWZ5OiBmYWxzZVxufSk7XG5cbm1vbmdvb3NlLmNvbm5lY3Rpb24ub24oJ2Nvbm5lY3RlZCcsICgpID0+IHtcbiAgICBsb2dnZXIuaW5mbygnTW9uZ28gaGFzIGNvbm5lY3RlZCBzdWNjZXNzZnVsbHknKTtcbiAgICBjb25zb2xlLmxvZygnTW9uZ28gaGFzIGNvbm5lY3RlZCBzdWNjZXNzZnVsbHknKTtcbn0pO1xubW9uZ29vc2UuY29ubmVjdGlvbi5vbigncmVjb25uZWN0ZWQnLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ01vbmdvIGhhcyByZWNvbm5lY3RlZCcpO1xuICAgIGxvZ2dlci5pbmZvKCdNb25nbyBoYXMgcmVjb25uZWN0ZWQnKTtcbn0pO1xubW9uZ29vc2UuY29ubmVjdGlvbi5vbignZXJyb3InLCBlcnJvciA9PiB7XG4gICAgY29uc29sZS5sb2coJ01vbmdvIGNvbm5lY3Rpb24gaGFzIGFuIGVycm9yJywgZXJyb3IpO1xuICAgIGxvZ2dlci5pbmZvKCdNb25nbyBjb25uZWN0aW9uIGhhcyBhbiBlcnJvcicsIGVycm9yKTtcbiAgICBtb25nb29zZS5kaXNjb25uZWN0KCk7XG59KTtcbm1vbmdvb3NlLmNvbm5lY3Rpb24ub24oJ2Rpc2Nvbm5lY3RlZCcsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZygnTW9uZ28gY29ubmVjdGlvbiBpcyBkaXNjb25uZWN0ZWQnKTtcbiAgICBsb2dnZXIuaW5mbygnTW9uZ28gY29ubmVjdGlvbiBpcyBkaXNjb25uZWN0ZWQnKTtcbn0pO1xuXG5leHBvcnQgeyBtb25nb29zZSBhcyBkYiB9O1xuIl19
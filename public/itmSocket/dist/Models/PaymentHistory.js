"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.paymentHistorySchema = void 0;

var _mongoose = require("mongoose");

var paymentHistorySchema = new _mongoose.Schema({
  deviceId: {
    type: String,
    required: true,
    index: true
  },
  platform: {
    type: String,
    enum: ['IOS', 'ANDROID']
  },
  paymentId: String,
  amount: Number,
  paymentType: {
    type: String,
    enum: ['wallet', 'membership']
  },
  userId: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  planId: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'Plan'
  },
  zoleId: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'Zole'
  },
  createdBy: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  updatedBy: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  isDeleted: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});
exports.paymentHistorySchema = paymentHistorySchema;
paymentHistorySchema.set('toJSON', {
  transform: (doc, ret, opt) => {
    delete ret.__v;
    return ret;
  }
});
var PaymentHistory = (0, _mongoose.model)('PaymentHistory', paymentHistorySchema);
var _default = PaymentHistory;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Nb2RlbHMvUGF5bWVudEhpc3RvcnkuanMiXSwibmFtZXMiOlsicGF5bWVudEhpc3RvcnlTY2hlbWEiLCJTY2hlbWEiLCJkZXZpY2VJZCIsInR5cGUiLCJTdHJpbmciLCJyZXF1aXJlZCIsImluZGV4IiwicGxhdGZvcm0iLCJlbnVtIiwicGF5bWVudElkIiwiYW1vdW50IiwiTnVtYmVyIiwicGF5bWVudFR5cGUiLCJ1c2VySWQiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwicGxhbklkIiwiem9sZUlkIiwiY3JlYXRlZEJ5IiwidXBkYXRlZEJ5IiwiaXNEZWxldGVkIiwiQm9vbGVhbiIsImRlZmF1bHQiLCJ0aW1lc3RhbXBzIiwic2V0IiwidHJhbnNmb3JtIiwiZG9jIiwicmV0Iiwib3B0IiwiX192IiwiUGF5bWVudEhpc3RvcnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFTyxJQUFNQSxvQkFBb0IsR0FBRyxJQUFJQyxnQkFBSixDQUFXO0FBQzNDQyxFQUFBQSxRQUFRLEVBQUU7QUFDTkMsSUFBQUEsSUFBSSxFQUFFQyxNQURBO0FBRU5DLElBQUFBLFFBQVEsRUFBRSxJQUZKO0FBR05DLElBQUFBLEtBQUssRUFBRTtBQUhELEdBRGlDO0FBTTNDQyxFQUFBQSxRQUFRLEVBQUU7QUFDTkosSUFBQUEsSUFBSSxFQUFFQyxNQURBO0FBRU5JLElBQUFBLElBQUksRUFBRSxDQUFDLEtBQUQsRUFBUSxTQUFSO0FBRkEsR0FOaUM7QUFVM0NDLEVBQUFBLFNBQVMsRUFBRUwsTUFWZ0M7QUFXM0NNLEVBQUFBLE1BQU0sRUFBRUMsTUFYbUM7QUFZM0NDLEVBQUFBLFdBQVcsRUFBRTtBQUNUVCxJQUFBQSxJQUFJLEVBQUVDLE1BREc7QUFFVEksSUFBQUEsSUFBSSxFQUFFLENBQUMsUUFBRCxFQUFXLFlBQVg7QUFGRyxHQVo4QjtBQWdCM0NLLEVBQUFBLE1BQU0sRUFBRTtBQUNKVixJQUFBQSxJQUFJLEVBQUVGLGlCQUFPYSxLQUFQLENBQWFDLFFBRGY7QUFFSkMsSUFBQUEsR0FBRyxFQUFFO0FBRkQsR0FoQm1DO0FBb0IzQ0MsRUFBQUEsTUFBTSxFQUFFO0FBQ0pkLElBQUFBLElBQUksRUFBRUYsaUJBQU9hLEtBQVAsQ0FBYUMsUUFEZjtBQUVKQyxJQUFBQSxHQUFHLEVBQUU7QUFGRCxHQXBCbUM7QUF3QjNDRSxFQUFBQSxNQUFNLEVBQUU7QUFDSmYsSUFBQUEsSUFBSSxFQUFFRixpQkFBT2EsS0FBUCxDQUFhQyxRQURmO0FBRUpDLElBQUFBLEdBQUcsRUFBRTtBQUZELEdBeEJtQztBQTRCM0NHLEVBQUFBLFNBQVMsRUFBRTtBQUNQaEIsSUFBQUEsSUFBSSxFQUFFRixpQkFBT2EsS0FBUCxDQUFhQyxRQURaO0FBRVBDLElBQUFBLEdBQUcsRUFBRSxNQUZFO0FBR1BYLElBQUFBLFFBQVEsRUFBRTtBQUhILEdBNUJnQztBQWlDM0NlLEVBQUFBLFNBQVMsRUFBRTtBQUNQakIsSUFBQUEsSUFBSSxFQUFFRixpQkFBT2EsS0FBUCxDQUFhQyxRQURaO0FBRVBDLElBQUFBLEdBQUcsRUFBRSxNQUZFO0FBR1BYLElBQUFBLFFBQVEsRUFBRTtBQUhILEdBakNnQztBQXNDM0NnQixFQUFBQSxTQUFTLEVBQUU7QUFDUGxCLElBQUFBLElBQUksRUFBRW1CLE9BREM7QUFFUEMsSUFBQUEsT0FBTyxFQUFFO0FBRkY7QUF0Q2dDLENBQVgsRUEwQ2pDO0FBQUVDLEVBQUFBLFVBQVUsRUFBRTtBQUFkLENBMUNpQyxDQUE3Qjs7QUE0Q1B4QixvQkFBb0IsQ0FBQ3lCLEdBQXJCLENBQXlCLFFBQXpCLEVBQW1DO0FBQy9CQyxFQUFBQSxTQUFTLEVBQUUsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLEdBQVgsS0FBbUI7QUFDMUIsV0FBT0QsR0FBRyxDQUFDRSxHQUFYO0FBQ0EsV0FBT0YsR0FBUDtBQUNIO0FBSjhCLENBQW5DO0FBT0EsSUFBTUcsY0FBYyxHQUFHLHFCQUFNLGdCQUFOLEVBQXdCL0Isb0JBQXhCLENBQXZCO2VBRWUrQixjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NoZW1hLCBtb2RlbCB9IGZyb20gJ21vbmdvb3NlJztcblxuZXhwb3J0IGNvbnN0IHBheW1lbnRIaXN0b3J5U2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgZGV2aWNlSWQ6IHtcbiAgICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICAgICAgaW5kZXg6IHRydWVcbiAgICB9LFxuICAgIHBsYXRmb3JtOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZW51bTogWydJT1MnLCAnQU5EUk9JRCddXG4gICAgfSxcbiAgICBwYXltZW50SWQ6IFN0cmluZyxcbiAgICBhbW91bnQ6IE51bWJlcixcbiAgICBwYXltZW50VHlwZToge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGVudW06IFsnd2FsbGV0JywgJ21lbWJlcnNoaXAnXVxuICAgIH0sXG4gICAgdXNlcklkOiB7XG4gICAgICAgIHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICAgICAgcmVmOiAnVXNlcidcbiAgICB9LFxuICAgIHBsYW5JZDoge1xuICAgICAgICB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsXG4gICAgICAgIHJlZjogJ1BsYW4nXG4gICAgfSxcbiAgICB6b2xlSWQ6IHtcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxuICAgICAgICByZWY6ICdab2xlJ1xuICAgIH0sXG4gICAgY3JlYXRlZEJ5OiB7XG4gICAgICAgIHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICAgICAgcmVmOiAnVXNlcicsXG4gICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgfSxcbiAgICB1cGRhdGVkQnk6IHtcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxuICAgICAgICByZWY6ICdVc2VyJyxcbiAgICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIGlzRGVsZXRlZDoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbn0sIHsgdGltZXN0YW1wczogdHJ1ZX0pO1xuXG5wYXltZW50SGlzdG9yeVNjaGVtYS5zZXQoJ3RvSlNPTicsIHtcbiAgICB0cmFuc2Zvcm06IChkb2MsIHJldCwgb3B0KSA9PiB7XG4gICAgICAgIGRlbGV0ZSByZXQuX192O1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbn0pO1xuXG5jb25zdCBQYXltZW50SGlzdG9yeSA9IG1vZGVsKCdQYXltZW50SGlzdG9yeScsIHBheW1lbnRIaXN0b3J5U2NoZW1hKTtcblxuZXhwb3J0IGRlZmF1bHQgUGF5bWVudEhpc3Rvcnk7XG4iXX0=
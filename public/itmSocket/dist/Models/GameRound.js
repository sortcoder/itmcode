"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = require("mongoose");

var gameRoundSchema = new _mongoose.Schema({
  game: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'Game'
  },
  roundName: String,
  firstUser: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  secUser: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  firstUserText: String,
  secUserText: String,
  winnerUser: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  status: {
    type: String,
    enum: ['pending', 'booked', 'running', 'rejected', 'completed', "draw", "match"],
    default: 'pending'
  },
  nextRoundStarted: {
    type: String,
    enum: ['Yes', 'No'],
    default: 'No'
  },
  m1: String,
  m2: String,
  m3: String,
  m4: String,
  m5: String,
  m6: String,
  m7: String,
  m8: String,
  m9: String,
  nextTurn: String,
  isDeleted: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});
gameRoundSchema.set('toJSON', {
  transform: (doc, ret, opt) => {
    delete ret.__v;
    return ret;
  }
});
var GameRound = (0, _mongoose.model)('GameRound', gameRoundSchema);
var _default = GameRound;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Nb2RlbHMvR2FtZVJvdW5kLmpzIl0sIm5hbWVzIjpbImdhbWVSb3VuZFNjaGVtYSIsIlNjaGVtYSIsImdhbWUiLCJ0eXBlIiwiVHlwZXMiLCJPYmplY3RJZCIsInJlZiIsInJvdW5kTmFtZSIsIlN0cmluZyIsImZpcnN0VXNlciIsInNlY1VzZXIiLCJmaXJzdFVzZXJUZXh0Iiwic2VjVXNlclRleHQiLCJ3aW5uZXJVc2VyIiwic3RhdHVzIiwiZW51bSIsImRlZmF1bHQiLCJuZXh0Um91bmRTdGFydGVkIiwibTEiLCJtMiIsIm0zIiwibTQiLCJtNSIsIm02IiwibTciLCJtOCIsIm05IiwibmV4dFR1cm4iLCJpc0RlbGV0ZWQiLCJCb29sZWFuIiwidGltZXN0YW1wcyIsInNldCIsInRyYW5zZm9ybSIsImRvYyIsInJldCIsIm9wdCIsIl9fdiIsIkdhbWVSb3VuZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBLElBQU1BLGVBQWUsR0FBRyxJQUFJQyxnQkFBSixDQUFXO0FBQy9CQyxFQUFBQSxJQUFJLEVBQUM7QUFDREMsSUFBQUEsSUFBSSxFQUFFRixpQkFBT0csS0FBUCxDQUFhQyxRQURsQjtBQUVEQyxJQUFBQSxHQUFHLEVBQUU7QUFGSixHQUQwQjtBQUsvQkMsRUFBQUEsU0FBUyxFQUFFQyxNQUxvQjtBQU0vQkMsRUFBQUEsU0FBUyxFQUFFO0FBQ1BOLElBQUFBLElBQUksRUFBRUYsaUJBQU9HLEtBQVAsQ0FBYUMsUUFEWjtBQUVQQyxJQUFBQSxHQUFHLEVBQUU7QUFGRSxHQU5vQjtBQVUvQkksRUFBQUEsT0FBTyxFQUFFO0FBQ0xQLElBQUFBLElBQUksRUFBRUYsaUJBQU9HLEtBQVAsQ0FBYUMsUUFEZDtBQUVMQyxJQUFBQSxHQUFHLEVBQUU7QUFGQSxHQVZzQjtBQWMvQkssRUFBQUEsYUFBYSxFQUFFSCxNQWRnQjtBQWUvQkksRUFBQUEsV0FBVyxFQUFFSixNQWZrQjtBQWdCL0JLLEVBQUFBLFVBQVUsRUFBRTtBQUNSVixJQUFBQSxJQUFJLEVBQUVGLGlCQUFPRyxLQUFQLENBQWFDLFFBRFg7QUFFUkMsSUFBQUEsR0FBRyxFQUFFO0FBRkcsR0FoQm1CO0FBb0IvQlEsRUFBQUEsTUFBTSxFQUFFO0FBQ0pYLElBQUFBLElBQUksRUFBRUssTUFERjtBQUVKTyxJQUFBQSxJQUFJLEVBQUUsQ0FBQyxTQUFELEVBQVksUUFBWixFQUFzQixTQUF0QixFQUFnQyxVQUFoQyxFQUEyQyxXQUEzQyxFQUF1RCxNQUF2RCxFQUE4RCxPQUE5RCxDQUZGO0FBR0pDLElBQUFBLE9BQU8sRUFBRTtBQUhMLEdBcEJ1QjtBQXlCL0JDLEVBQUFBLGdCQUFnQixFQUFFO0FBQ2RkLElBQUFBLElBQUksRUFBRUssTUFEUTtBQUVkTyxJQUFBQSxJQUFJLEVBQUUsQ0FBQyxLQUFELEVBQVEsSUFBUixDQUZRO0FBR2RDLElBQUFBLE9BQU8sRUFBRTtBQUhLLEdBekJhO0FBOEIvQkUsRUFBQUEsRUFBRSxFQUFFVixNQTlCMkI7QUErQi9CVyxFQUFBQSxFQUFFLEVBQUVYLE1BL0IyQjtBQWdDL0JZLEVBQUFBLEVBQUUsRUFBRVosTUFoQzJCO0FBaUMvQmEsRUFBQUEsRUFBRSxFQUFFYixNQWpDMkI7QUFrQy9CYyxFQUFBQSxFQUFFLEVBQUVkLE1BbEMyQjtBQW1DL0JlLEVBQUFBLEVBQUUsRUFBRWYsTUFuQzJCO0FBb0MvQmdCLEVBQUFBLEVBQUUsRUFBRWhCLE1BcEMyQjtBQXFDL0JpQixFQUFBQSxFQUFFLEVBQUVqQixNQXJDMkI7QUFzQy9Ca0IsRUFBQUEsRUFBRSxFQUFFbEIsTUF0QzJCO0FBdUMvQm1CLEVBQUFBLFFBQVEsRUFBRW5CLE1BdkNxQjtBQTJDL0JvQixFQUFBQSxTQUFTLEVBQUU7QUFDUHpCLElBQUFBLElBQUksRUFBRTBCLE9BREM7QUFFUGIsSUFBQUEsT0FBTyxFQUFFO0FBRkY7QUEzQ29CLENBQVgsRUErQ3JCO0FBQUNjLEVBQUFBLFVBQVUsRUFBRTtBQUFiLENBL0NxQixDQUF4QjtBQWlEQTlCLGVBQWUsQ0FBQytCLEdBQWhCLENBQW9CLFFBQXBCLEVBQThCO0FBQzFCQyxFQUFBQSxTQUFTLEVBQUUsQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQVdDLEdBQVgsS0FBbUI7QUFDMUIsV0FBT0QsR0FBRyxDQUFDRSxHQUFYO0FBQ0EsV0FBT0YsR0FBUDtBQUNIO0FBSnlCLENBQTlCO0FBT0EsSUFBTUcsU0FBUyxHQUFHLHFCQUFNLFdBQU4sRUFBbUJyQyxlQUFuQixDQUFsQjtlQUVlcUMsUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2NoZW1hLCBtb2RlbH0gZnJvbSAnbW9uZ29vc2UnO1xuXG5jb25zdCBnYW1lUm91bmRTY2hlbWEgPSBuZXcgU2NoZW1hKHtcbiAgICBnYW1lOntcbiAgICAgICAgdHlwZTogU2NoZW1hLlR5cGVzLk9iamVjdElkLFxuICAgICAgICByZWY6ICdHYW1lJyxcbiAgICB9LFxuICAgIHJvdW5kTmFtZTogU3RyaW5nLFxuICAgIGZpcnN0VXNlcjoge1xuICAgICAgICB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsXG4gICAgICAgIHJlZjogJ1VzZXInLFxuICAgIH0sXG4gICAgc2VjVXNlcjoge1xuICAgICAgICB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsXG4gICAgICAgIHJlZjogJ1VzZXInLFxuICAgIH0sXG4gICAgZmlyc3RVc2VyVGV4dDogU3RyaW5nLFxuICAgIHNlY1VzZXJUZXh0OiBTdHJpbmcsXG4gICAgd2lubmVyVXNlcjoge1xuICAgICAgICB0eXBlOiBTY2hlbWEuVHlwZXMuT2JqZWN0SWQsXG4gICAgICAgIHJlZjogJ1VzZXInLFxuICAgIH0sXG4gICAgc3RhdHVzOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZW51bTogWydwZW5kaW5nJywgJ2Jvb2tlZCcsICdydW5uaW5nJywncmVqZWN0ZWQnLCdjb21wbGV0ZWQnLFwiZHJhd1wiLFwibWF0Y2hcIl0sXG4gICAgICAgIGRlZmF1bHQ6ICdwZW5kaW5nJ1xuICAgIH0sXG4gICAgbmV4dFJvdW5kU3RhcnRlZDoge1xuICAgICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICAgIGVudW06IFsnWWVzJywgJ05vJ10sXG4gICAgICAgIGRlZmF1bHQ6ICdObydcbiAgICB9LFxuICAgIG0xOiBTdHJpbmcsXG4gICAgbTI6IFN0cmluZyxcbiAgICBtMzogU3RyaW5nLFxuICAgIG00OiBTdHJpbmcsXG4gICAgbTU6IFN0cmluZyxcbiAgICBtNjogU3RyaW5nLFxuICAgIG03OiBTdHJpbmcsXG4gICAgbTg6IFN0cmluZyxcbiAgICBtOTogU3RyaW5nLFxuICAgIG5leHRUdXJuOiBTdHJpbmcsXG4gIFxuICAgIFxuICBcbiAgICBpc0RlbGV0ZWQ6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgZGVmYXVsdDogZmFsc2VcbiAgICB9LFxufSwge3RpbWVzdGFtcHM6IHRydWV9KTtcblxuZ2FtZVJvdW5kU2NoZW1hLnNldCgndG9KU09OJywge1xuICAgIHRyYW5zZm9ybTogKGRvYywgcmV0LCBvcHQpID0+IHtcbiAgICAgICAgZGVsZXRlIHJldC5fX3Y7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfSxcbn0pO1xuXG5jb25zdCBHYW1lUm91bmQgPSBtb2RlbCgnR2FtZVJvdW5kJywgZ2FtZVJvdW5kU2NoZW1hKTtcblxuZXhwb3J0IGRlZmF1bHQgR2FtZVJvdW5kO1xuIl19
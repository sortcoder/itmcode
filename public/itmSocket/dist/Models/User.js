"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.userSchema = void 0;

var _mongoose = require("mongoose");

var userSchema = new _mongoose.Schema({
  name: {
    type: String,
    required: true,
    index: true
  },
  email: {
    type: String,
    required: true,
    index: true,
    unique: true
  },
  tempEmail: {
    type: String,
    required: true,
    index: true,
    unique: true
  },
  isEmailVerified: Boolean,
  mobile: {
    type: String
  },
  tempMobile: {
    type: String
  },
  isMobileVerified: {
    type: Boolean,
    default: false
  },
  profilePic: String,
  kycImage: String,
  kycStatus: {
    type: String,
    enum: ['pending', 'completed', 'rejected']
  },
  isProfilePicVerified: {
    type: Boolean,
    default: false
  },
  myVisitors: [{
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }],
  deviceId: String,
  platform: String,
  deviceToken: String,
  followers: [{
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }],
  followings: [{
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }],
  popularity: Number,
  wallet: Number,
  message: Number,
  isSubscribed: {
    type: Boolean,
    default: false
  },
  likes: [{
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }],
  recentSearches: [{
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }],
  gender: {
    type: String,
    enum: ['Male', 'Female', 'Other']
  },
  dob: {
    type: Number
  },
  age: Number,
  isAge: {
    type: Boolean,
    default: true
  },
  password: String,
  referCode: {
    type: String,
    unique: true
  },
  referBy: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  userId: {
    type: String,
    unique: true
  },
  country: String,
  state: String,
  district: String,
  isDistrict: {
    type: Boolean,
    default: true
  },
  religion: String,
  otp: String,
  status: {
    type: Boolean,
    default: true
  },
  aboutStatus: String,
  relationshipStatus: {
    type: String,
    enum: ['married', 'single', 'inRelationship', 'divorced', 'widowed', 'separated']
  },
  lookingFor: {
    type: String,
    enum: ['relationship', 'friends', 'fun', 'marriage', 'other']
  },
  bloodGroup: String,
  isBloodGroup: {
    type: Boolean,
    default: true
  },
  usersSubId: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'Subscription'
  },
  height: String,
  isHeight: {
    type: Boolean,
    default: true
  },
  bodyType: {
    type: String,
    enum: ['muscular', 'average', 'fit', 'thin']
  },
  isBodyType: {
    type: Boolean,
    default: true
  },
  smoker: {
    type: Boolean,
    default: false
  },
  isSmoker: {
    type: Boolean,
    default: true
  },
  drunker: {
    type: Boolean,
    default: false
  },
  isDrunker: {
    type: Boolean,
    default: true
  },
  education: String,
  isEducation: {
    type: Boolean,
    default: true
  },
  workspace: String,
  isWorkspace: {
    type: Boolean,
    default: true
  },
  role: {
    type: String,
    enum: ['admin', 'user']
  },
  isBlocked: {
    type: Boolean,
    default: false
  },
  latitude: {
    type: Number,
    default: 0.0
  },
  longitude: {
    type: Number,
    default: 0.0
  },
  location: {
    type: {
      type: String
    },
    coordinates: []
  },
  lastScreenTime: {
    type: Date // default: Date.now

  },
  chatOnlineStatus: {
    type: Boolean,
    default: false
  },
  chatTime: {
    type: Date // default: Date.now

  },
  isMailVerified: {
    type: Boolean,
    default: false
  },
  mailVerifyOtp: {
    type: String
  },
  isDeleted: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true,
  collection: 'users'
});
exports.userSchema = userSchema;
userSchema.set('toJSON', {
  transform: (doc, ret, opt) => {
    delete ret.__v;
    return ret;
  }
});
userSchema.index({
  location: "2dsphere"
});
var User = (0, _mongoose.model)('User', userSchema);
var _default = User;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
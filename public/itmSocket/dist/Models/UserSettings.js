"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.userSettingsSchema = void 0;

var _mongoose = require("mongoose");

var userSettingsSchema = new _mongoose.Schema({
  userId: {
    type: _mongoose.Schema.Types.ObjectId,
    ref: 'User'
  },
  location: String,
  showMe: {
    type: String,
    enum: ['Male', 'Female', 'Other']
  },
  minAge: Number,
  maxAge: Number,
  newMessages: {
    type: Boolean,
    default: true
  },
  newVisitors: {
    type: Boolean,
    default: true
  },
  inviteToRoom: {
    type: Boolean,
    default: true
  },
  newPopularity: {
    type: Boolean,
    default: true
  },
  popularityShow: {
    type: Boolean,
    default: true
  },
  zoleShow: {
    type: Boolean,
    default: true
  },
  giftShow: {
    type: Boolean,
    default: true
  },
  profileLikeShow: {
    type: Boolean,
    default: true
  },
  notification: {
    type: Boolean,
    default: true
  },
  isDeleted: {
    type: Boolean,
    default: false
  }
}, {
  timestamps: true
});
exports.userSettingsSchema = userSettingsSchema;
userSettingsSchema.set('toJSON', {
  transform: (doc, ret, opt) => {
    delete ret.__v;
    return ret;
  }
});
var Settings = (0, _mongoose.model)('Settings', userSettingsSchema);
var _default = Settings;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Nb2RlbHMvVXNlclNldHRpbmdzLmpzIl0sIm5hbWVzIjpbInVzZXJTZXR0aW5nc1NjaGVtYSIsIlNjaGVtYSIsInVzZXJJZCIsInR5cGUiLCJUeXBlcyIsIk9iamVjdElkIiwicmVmIiwibG9jYXRpb24iLCJTdHJpbmciLCJzaG93TWUiLCJlbnVtIiwibWluQWdlIiwiTnVtYmVyIiwibWF4QWdlIiwibmV3TWVzc2FnZXMiLCJCb29sZWFuIiwiZGVmYXVsdCIsIm5ld1Zpc2l0b3JzIiwiaW52aXRlVG9Sb29tIiwibmV3UG9wdWxhcml0eSIsInBvcHVsYXJpdHlTaG93Iiwiem9sZVNob3ciLCJnaWZ0U2hvdyIsInByb2ZpbGVMaWtlU2hvdyIsIm5vdGlmaWNhdGlvbiIsImlzRGVsZXRlZCIsInRpbWVzdGFtcHMiLCJzZXQiLCJ0cmFuc2Zvcm0iLCJkb2MiLCJyZXQiLCJvcHQiLCJfX3YiLCJTZXR0aW5ncyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVPLElBQU1BLGtCQUFrQixHQUFHLElBQUlDLGdCQUFKLENBQVc7QUFDekNDLEVBQUFBLE1BQU0sRUFBRTtBQUNKQyxJQUFBQSxJQUFJLEVBQUVGLGlCQUFPRyxLQUFQLENBQWFDLFFBRGY7QUFFSkMsSUFBQUEsR0FBRyxFQUFFO0FBRkQsR0FEaUM7QUFLekNDLEVBQUFBLFFBQVEsRUFBRUMsTUFMK0I7QUFNekNDLEVBQUFBLE1BQU0sRUFBRTtBQUNKTixJQUFBQSxJQUFJLEVBQUVLLE1BREY7QUFFSkUsSUFBQUEsSUFBSSxFQUFFLENBQUMsTUFBRCxFQUFTLFFBQVQsRUFBbUIsT0FBbkI7QUFGRixHQU5pQztBQVV6Q0MsRUFBQUEsTUFBTSxFQUFFQyxNQVZpQztBQVd6Q0MsRUFBQUEsTUFBTSxFQUFFRCxNQVhpQztBQVl6Q0UsRUFBQUEsV0FBVyxFQUFFO0FBQ1RYLElBQUFBLElBQUksRUFBRVksT0FERztBQUVUQyxJQUFBQSxPQUFPLEVBQUU7QUFGQSxHQVo0QjtBQWdCekNDLEVBQUFBLFdBQVcsRUFBRTtBQUNUZCxJQUFBQSxJQUFJLEVBQUVZLE9BREc7QUFFVEMsSUFBQUEsT0FBTyxFQUFFO0FBRkEsR0FoQjRCO0FBb0J6Q0UsRUFBQUEsWUFBWSxFQUFFO0FBQ1ZmLElBQUFBLElBQUksRUFBRVksT0FESTtBQUVWQyxJQUFBQSxPQUFPLEVBQUU7QUFGQyxHQXBCMkI7QUF3QnpDRyxFQUFBQSxhQUFhLEVBQUU7QUFDWGhCLElBQUFBLElBQUksRUFBRVksT0FESztBQUVYQyxJQUFBQSxPQUFPLEVBQUU7QUFGRSxHQXhCMEI7QUE0QnpDSSxFQUFBQSxjQUFjLEVBQUU7QUFDWmpCLElBQUFBLElBQUksRUFBRVksT0FETTtBQUVaQyxJQUFBQSxPQUFPLEVBQUU7QUFGRyxHQTVCeUI7QUFnQ3pDSyxFQUFBQSxRQUFRLEVBQUU7QUFDTmxCLElBQUFBLElBQUksRUFBRVksT0FEQTtBQUVOQyxJQUFBQSxPQUFPLEVBQUU7QUFGSCxHQWhDK0I7QUFvQ3pDTSxFQUFBQSxRQUFRLEVBQUU7QUFDTm5CLElBQUFBLElBQUksRUFBRVksT0FEQTtBQUVOQyxJQUFBQSxPQUFPLEVBQUU7QUFGSCxHQXBDK0I7QUF3Q3pDTyxFQUFBQSxlQUFlLEVBQUU7QUFDYnBCLElBQUFBLElBQUksRUFBRVksT0FETztBQUViQyxJQUFBQSxPQUFPLEVBQUU7QUFGSSxHQXhDd0I7QUE0Q3pDUSxFQUFBQSxZQUFZLEVBQUU7QUFDVnJCLElBQUFBLElBQUksRUFBRVksT0FESTtBQUVWQyxJQUFBQSxPQUFPLEVBQUU7QUFGQyxHQTVDMkI7QUFnRHpDUyxFQUFBQSxTQUFTLEVBQUU7QUFDUHRCLElBQUFBLElBQUksRUFBRVksT0FEQztBQUVQQyxJQUFBQSxPQUFPLEVBQUU7QUFGRjtBQWhEOEIsQ0FBWCxFQW9EL0I7QUFBQ1UsRUFBQUEsVUFBVSxFQUFFO0FBQWIsQ0FwRCtCLENBQTNCOztBQXNEUDFCLGtCQUFrQixDQUFDMkIsR0FBbkIsQ0FBdUIsUUFBdkIsRUFBaUM7QUFDN0JDLEVBQUFBLFNBQVMsRUFBRSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBV0MsR0FBWCxLQUFtQjtBQUMxQixXQUFPRCxHQUFHLENBQUNFLEdBQVg7QUFDQSxXQUFPRixHQUFQO0FBQ0g7QUFKNEIsQ0FBakM7QUFPQSxJQUFNRyxRQUFRLEdBQUcscUJBQU0sVUFBTixFQUFrQmpDLGtCQUFsQixDQUFqQjtlQUVlaUMsUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U2NoZW1hLCBtb2RlbH0gZnJvbSAnbW9uZ29vc2UnO1xuXG5leHBvcnQgY29uc3QgdXNlclNldHRpbmdzU2NoZW1hID0gbmV3IFNjaGVtYSh7XG4gICAgdXNlcklkOiB7XG4gICAgICAgIHR5cGU6IFNjaGVtYS5UeXBlcy5PYmplY3RJZCxcbiAgICAgICAgcmVmOiAnVXNlcidcbiAgICB9LFxuICAgIGxvY2F0aW9uOiBTdHJpbmcsXG4gICAgc2hvd01lOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZW51bTogWydNYWxlJywgJ0ZlbWFsZScsICdPdGhlciddXG4gICAgfSxcbiAgICBtaW5BZ2U6IE51bWJlcixcbiAgICBtYXhBZ2U6IE51bWJlcixcbiAgICBuZXdNZXNzYWdlczoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBuZXdWaXNpdG9yczoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBpbnZpdGVUb1Jvb206IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgbmV3UG9wdWxhcml0eToge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBwb3B1bGFyaXR5U2hvdzoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICB6b2xlU2hvdzoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBnaWZ0U2hvdzoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBkZWZhdWx0OiB0cnVlXG4gICAgfSxcbiAgICBwcm9maWxlTGlrZVNob3c6IHtcbiAgICAgICAgdHlwZTogQm9vbGVhbixcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgIH0sXG4gICAgbm90aWZpY2F0aW9uOiB7XG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXG4gICAgICAgIGRlZmF1bHQ6IHRydWVcbiAgICB9LFxuICAgIGlzRGVsZXRlZDoge1xuICAgICAgICB0eXBlOiBCb29sZWFuLFxuICAgICAgICBkZWZhdWx0OiBmYWxzZVxuICAgIH1cbn0sIHt0aW1lc3RhbXBzOiB0cnVlfSk7XG5cbnVzZXJTZXR0aW5nc1NjaGVtYS5zZXQoJ3RvSlNPTicsIHtcbiAgICB0cmFuc2Zvcm06IChkb2MsIHJldCwgb3B0KSA9PiB7XG4gICAgICAgIGRlbGV0ZSByZXQuX192O1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbn0pO1xuXG5jb25zdCBTZXR0aW5ncyA9IG1vZGVsKCdTZXR0aW5ncycsIHVzZXJTZXR0aW5nc1NjaGVtYSk7XG5cbmV4cG9ydCBkZWZhdWx0IFNldHRpbmdzO1xuIl19